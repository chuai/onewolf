<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	

	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:conf/db.properties" />
	
	<!-- 自动扫描(自动注入) -->
	<context:component-scan base-package="com.chuai.onewolf"></context:component-scan>

	<!-- 配置 C3P0 数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
	</bean>

	<!-- 配置 Spirng 的 JdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">  
  <!-- 此处应注入ibatis配置文件，而非sqlMap文件，否则会出现“there is no statement.....异常” -->  
  <property name="configLocation">  
     <value>classpath:conf/sqlMapConfig.xml</value>  
  </property>  
  
</bean>
	<!-- 配置 NamedParameterJdbcTemplate, 该对象可以使用具名参数, 其没有无参数的构造器, 所以必须为其构造器指定参数 -->
<!-- 	<bean id="namedParameterJdbcTemplate" -->
<!-- 		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate"> -->
<!-- 		<constructor-arg ref="dataSource"></constructor-arg> -->
<!-- 	</bean> -->

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 启用事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" />


	<!-- 引入属性文件 -->
	<!-- <context:property-placeholder location="classpath:conf/db.properties" 
		/> -->
	<!-- 自动扫描(自动注入) -->
	<!-- <context:component-scan base-package="com.chuai.onewolf.server" /> -->




	<!-- JNDI方式配置数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="${jndiName}"></property> </bean> -->

	<!-- 配置数据源 -->
	<!-- <bean id="dataSource" name="dataSource" -->
	<!-- class="com.alibaba.druid.pool.DruidDataSource" init-method="init" -->
	<!-- destroy-method="close"> -->
	<!-- <property name="url" value="${jdbc_url}" /> -->
	<!-- <property name="username" value="${jdbc_username}" /> -->
	<!-- <property name="password" value="${jdbc_password}" /> -->

	<!-- 初始化连接大小 -->
	<!-- <property name="initialSize" value="0" /> -->
	<!-- 连接池最大使用连接数量 -->
	<!-- <property name="maxActive" value="20" /> -->
	<!-- 连接池最大空闲 -->
	<!-- <property name="maxIdle" value="20" /> -->
	<!-- 连接池最小空闲 -->
	<!-- <property name="minIdle" value="0" /> -->
	<!-- 获取连接最大等待时间 -->
	<!-- <property name="maxWait" value="60000" /> -->

	<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
		value="33" /> -->

	<!-- <property name="validationQuery" value="${validationQuery}" /> -->
	<!-- <property name="testOnBorrow" value="false" /> -->
	<!-- <property name="testOnReturn" value="false" /> -->
	<!-- <property name="testWhileIdle" value="true" /> -->

	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	<!-- <property name="timeBetweenEvictionRunsMillis" value="60000" /> -->
	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	<!-- <property name="minEvictableIdleTimeMillis" value="25200000" /> -->

	<!-- 打开removeAbandoned功能 -->
	<!-- <property name="removeAbandoned" value="true" /> -->
	<!-- 1800秒，也就是30分钟 -->
	<!-- <property name="removeAbandonedTimeout" value="1800" /> -->
	<!-- 关闭abanded连接时输出错误日志 -->
	<!-- <property name="logAbandoned" value="true" /> -->

	<!-- 监控数据库 -->
	<!-- <property name="filters" value="stat" /> -->
	<!-- <property name="filters" value="mergeStat" /> -->
	<!-- </bean> -->

	<!-- myBatis文件 -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置，自己配置的时候遇到个问题，扫面不到mapper.xml，找了半天没找到原因，最后因为myeclipse的原因，include，自己不小心点击成exclude了， 
		找了合作公司的技术大牛给解决的，同学们千万记住没事别乱点 -->
	<!-- <property name="mapperLocations" value="classpath*:com/nantian/mapping/*Mapper.xml" 
		/> -->
	<!-- </bean> -->

	<!-- <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
	<!-- <property name="basePackage" value="com.nantian.dao" /> -->
	<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" 
		/> -->
	<!-- </bean> -->

	<!-- 配置事务管理器 -->
	<!-- <bean id="transactionManager" -->
	<!-- class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- </bean> -->

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager"> -->
	<!-- <tx:attributes> -->
	<!-- <tx:method name="add*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="append*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="insert*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="save*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="update*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="modify*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="edit*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="delete*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="remove*" propagation="REQUIRED" /> -->
	<!-- <tx:method name="repair" propagation="REQUIRED" /> -->
	<!-- <tx:method name="delAndRepair" propagation="REQUIRED" /> -->

	<!-- <tx:method name="get*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="find*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="load*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="search*" propagation="SUPPORTS" /> -->
	<!-- <tx:method name="datagrid*" propagation="SUPPORTS" /> -->

	<!-- <tx:method name="*" propagation="SUPPORTS" /> -->
	<!-- </tx:attributes> -->
	<!-- </tx:advice> -->
	<!-- <aop:config> -->
	<!-- <aop:pointcut id="transactionPointcut" -->
	<!-- expression="execution(* com.nantian.service..*Impl.*(..))" /> -->
	<!-- <aop:advisor pointcut-ref="transactionPointcut" -->
	<!-- advice-ref="transactionAdvice" /> -->
	<!-- </aop:config> -->


	<!-- 配置druid监控spring jdbc -->
	<!-- <bean id="druid-stat-interceptor" -->
	<!-- class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> -->
	<!-- </bean> -->
	<!-- <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" -->
	<!-- scope="prototype"> -->
	<!-- <property name="patterns"> -->
	<!-- <list> -->
	<!-- <value>com.nantian.serviceimpl.*</value> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- <aop:config> -->
	<!-- <aop:advisor advice-ref="druid-stat-interceptor" -->
	<!-- pointcut-ref="druid-stat-pointcut" /> -->
	<!-- </aop:config> -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> -->
	<!-- <constructor-arg ref="dataSource" /> -->
	<!-- </bean> -->





















</beans>



